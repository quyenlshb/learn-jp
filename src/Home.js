// src/Home.js
import React, { useEffect, useState } from "react";
import { Link } from "react-router-dom";
import {
  collection,
  getDocs,
  deleteDoc,
  doc,
  updateDoc,
} from "firebase/firestore";
import { db, auth } from "./firebaseClient";
import Leaderboard from "./Leaderboard"; // üëâ th√™m BXH

const Home = () => {
  const [myCourses, setMyCourses] = useState([]);
  const [publicCourses, setPublicCourses] = useState([]);
  const [editingId, setEditingId] = useState(null);
  const [newName, setNewName] = useState("");

  const fetchCourses = async () => {
    try {
      const snapshot = await getDocs(collection(db, "courses"));
      const allCourses = snapshot.docs.map((docSnap) => ({
        id: docSnap.id,
        ...docSnap.data(),
      }));

      // T√°ch ra kh√≥a h·ªçc c·ªßa t√¥i & kh√≥a h·ªçc c√¥ng khai
      const mine = allCourses.filter(
        (c) => c.owner === auth.currentUser?.uid
      );
      const publics = allCourses.filter(
        (c) => c.isPublic && c.owner !== auth.currentUser?.uid
      );

      setMyCourses(mine);
      setPublicCourses(publics);
    } catch (err) {
      console.error("L·ªói l·∫•y danh s√°ch kho√° h·ªçc:", err);
    }
  };

  useEffect(() => {
    fetchCourses();
  }, []);

  // X√≥a kh√≥a h·ªçc v√† to√†n b·ªô t·ª´ trong subcollection
  const handleDeleteCourse = async (courseId) => {
    if (!window.confirm("B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a kh√≥a h·ªçc n√†y kh√¥ng?")) return;
    try {
      // X√≥a to√†n b·ªô words trong subcollection
      const wordsSnap = await getDocs(collection(db, "courses", courseId, "words"));
      const deletePromises = wordsSnap.docs.map((d) =>
        deleteDoc(doc(db, "courses", courseId, "words", d.id))
      );
      await Promise.all(deletePromises);

      // X√≥a document kh√≥a h·ªçc
      await deleteDoc(doc(db, "courses", courseId));

      alert("‚úÖ ƒê√£ x√≥a kh√≥a h·ªçc!");
      fetchCourses();
    } catch (err) {
      console.error("L·ªói khi x√≥a:", err);
      alert("‚ùå X√≥a th·∫•t b·∫°i, vui l√≤ng th·ª≠ l·∫°i.");
    }
  };

  // C·∫≠p nh·∫≠t t√™n kh√≥a h·ªçc
  const handleUpdateCourse = async (courseId) => {
    if (!newName.trim()) {
      alert("T√™n kh√≥a h·ªçc kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng");
      return;
    }
    try {
      await updateDoc(doc(db, "courses", courseId), { title: newName });
      alert("‚úÖ ƒê√£ c·∫≠p nh·∫≠t t√™n kh√≥a h·ªçc!");
      setEditingId(null);
      setNewName("");
      fetchCourses();
    } catch (err) {
      console.error("L·ªói khi c·∫≠p nh·∫≠t:", err);
      alert("‚ùå C·∫≠p nh·∫≠t th·∫•t b·∫°i, vui l√≤ng th·ª≠ l·∫°i.");
    }
  };

  return (
    <div style={{ display: "flex" }}>
      {/* BXH t·ªïng b√™n tr√°i */}
      <Leaderboard />

      {/* N·ªôi dung ch√≠nh */}
      <div style={{ flex: 1, padding: "20px" }}>
        <h1 style={{ fontSize: "28px", marginBottom: "20px" }}>üè† Trang ch·ªß</h1>

        <button
          style={{
            padding: "10px 20px",
            marginBottom: "20px",
            backgroundColor: "#4CAF50",
            color: "#fff",
            border: "none",
            borderRadius: "5px",
            cursor: "pointer",
          }}
        >
          <Link
            to="/create-course"
            style={{ color: "white", textDecoration: "none" }}
          >
            ‚ûï T·∫°o kho√° h·ªçc
          </Link>
        </button>

        {/* Kho√° h·ªçc c·ªßa t√¥i */}
        <h3>üìò Kho√° h·ªçc c·ªßa t√¥i</h3>
        <ul style={{ listStyle: "none", padding: 0 }}>
          {myCourses.length > 0 ? (
            myCourses.map((c) => (
              <li
                key={c.id}
                style={{
                  marginBottom: "15px",
                  padding: "10px",
                  border: "1px solid #ddd",
                  borderRadius: "5px",
                  display: "flex",
                  justifyContent: "space-between",
                  alignItems: "center",
                }}
              >
                {editingId === c.id ? (
                  <>
                    <input
                      type="text"
                      value={newName}
                      onChange={(e) => setNewName(e.target.value)}
                      style={{ padding: "5px", marginRight: "10px" }}
                    />
                    <button
                      onClick={() => handleUpdateCourse(c.id)}
                      style={{ marginRight: "5px" }}
                    >
                      L∆∞u
                    </button>
                    <button onClick={() => setEditingId(null)}>H·ªßy</button>
                  </>
                ) : (
                  <>
                    <Link
                      to={`/course/${c.id}`}
                      style={{ textDecoration: "none" }}
                    >
                      <strong>{c.title}</strong>
                    </Link>
                    <div>
                      <button
                        onClick={() => {
                          setEditingId(c.id);
                          setNewName(c.title);
                        }}
                        style={{
                          marginLeft: "10px",
                          background: "#2196F3",
                          color: "white",
                          padding: "5px 8px",
                          border: "none",
                          borderRadius: "5px",
                          cursor: "pointer",
                        }}
                      >
                        ‚úèÔ∏è
                      </button>
                      <button
                        onClick={() => handleDeleteCourse(c.id)}
                        style={{
                          marginLeft: "10px",
                          background: "red",
                          color: "white",
                          padding: "5px 8px",
                          border: "none",
                          borderRadius: "5px",
                          cursor: "pointer",
                        }}
                      >
                        üóëÔ∏è
                      </button>
                    </div>
                  </>
                )}
              </li>
            ))
          ) : (
            <p>Ch∆∞a c√≥ kho√° h·ªçc n√†o.</p>
          )}
        </ul>

        {/* Kho√° h·ªçc c√¥ng khai */}
        <h3>üåç Kho√° h·ªçc ƒë∆∞·ª£c chia s·∫ª t·ª´ c·ªông ƒë·ªìng</h3>
        <ul style={{ listStyle: "none", padding: 0 }}>
          {publicCourses.length > 0 ? (
            publicCourses.map((c) => (
              <li
                key={c.id}
                style={{
                  marginBottom: "15px",
                  padding: "10px",
                  border: "1px solid #ddd",
                  borderRadius: "5px",
                }}
              >
                <Link to={`/course/${c.id}`} style={{ textDecoration: "none" }}>
                  <strong>{c.title}</strong>
                </Link>
                <p style={{ margin: "5px 0", color: "#666" }}>
                  üë§ Ng∆∞·ªùi t·∫°o: {c.owner}
                </p>
              </li>
            ))
          ) : (
            <p>Kh√¥ng c√≥ kho√° h·ªçc c√¥ng khai n√†o.</p>
          )}
        </ul>
      </div>
    </div>
  );
};

export default Home;
