// src/Home.js
import React, { useEffect, useState } from "react";
import { Link } from "react-router-dom";
import {
  collection,
  query,
  where,
  getDocs,
  deleteDoc,
  doc,
  updateDoc,
} from "firebase/firestore";
import { db, auth } from "./firebaseClient";

const Home = () => {
  const [courses, setCourses] = useState([]);
  const [editingId, setEditingId] = useState(null);
  const [newName, setNewName] = useState("");

  const fetchCourses = async () => {
    try {
      const q = query(
        collection(db, "courses"),
        where("owner", "==", auth.currentUser.uid)
      );
      const snapshot = await getDocs(q);
      const list = snapshot.docs.map((doc) => ({
        id: doc.id,
        ...doc.data(),
      }));
      setCourses(list);
    } catch (err) {
      console.error("L·ªói l·∫•y danh s√°ch kho√° h·ªçc:", err);
    }
  };

  useEffect(() => {
    fetchCourses();
  }, []);

  // X√≥a kh√≥a h·ªçc v√† to√†n b·ªô t·ª´ trong subcollection
  const handleDeleteCourse = async (courseId) => {
    if (!window.confirm("B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a kh√≥a h·ªçc n√†y kh√¥ng?")) return;
    try {
      // X√≥a to√†n b·ªô words
      const wordsSnap = await getDocs(collection(db, "courses", courseId, "words"));
      const deletePromises = wordsSnap.docs.map((d) =>
        deleteDoc(doc(db, "courses", courseId, "words", d.id))
      );
      await Promise.all(deletePromises);

      // X√≥a document kh√≥a h·ªçc
      await deleteDoc(doc(db, "courses", courseId));

      alert("‚úÖ ƒê√£ x√≥a kh√≥a h·ªçc!");
      fetchCourses();
    } catch (err) {
      console.error("L·ªói khi x√≥a:", err);
      alert("‚ùå X√≥a th·∫•t b·∫°i, vui l√≤ng th·ª≠ l·∫°i.");
    }
  };

  // C·∫≠p nh·∫≠t t√™n kh√≥a h·ªçc
  const handleUpdateCourse = async (courseId) => {
    if (!newName.trim()) {
      alert("T√™n kh√≥a h·ªçc kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng");
      return;
    }
    try {
      await updateDoc(doc(db, "courses", courseId), { title: newName });
      alert("‚úÖ ƒê√£ c·∫≠p nh·∫≠t t√™n kh√≥a h·ªçc!");
      setEditingId(null);
      setNewName("");
      fetchCourses();
    } catch (err) {
      console.error("L·ªói khi c·∫≠p nh·∫≠t:", err);
      alert("‚ùå C·∫≠p nh·∫≠t th·∫•t b·∫°i, vui l√≤ng th·ª≠ l·∫°i.");
    }
  };

  return (
    <div style={{ padding: "20px" }}>
      <h2>Trang ch·ªß</h2>

      <button
        style={{
          padding: "10px 20px",
          marginBottom: "20px",
          backgroundColor: "#4CAF50",
          color: "#fff",
          border: "none",
          borderRadius: "5px",
          cursor: "pointer",
        }}
      >
        <Link to="/create-course" style={{ color: "white", textDecoration: "none" }}>
          ‚ûï T·∫°o kho√° h·ªçc
        </Link>
      </button>

      <h3>Danh s√°ch kho√° h·ªçc</h3>
      <ul style={{ listStyle: "none", padding: 0 }}>
        {courses.length > 0 ? (
          courses.map((c) => (
            <li
              key={c.id}
              style={{
                marginBottom: "15px",
                padding: "10px",
                border: "1px solid #ddd",
                borderRadius: "5px",
                display: "flex",
                justifyContent: "space-between",
                alignItems: "center",
              }}
            >
              {editingId === c.id ? (
                <>
                  <input
                    type="text"
                    value={newName}
                    onChange={(e) => setNewName(e.target.value)}
                    style={{ padding: "5px", marginRight: "10px" }}
                  />
                  <button
                    onClick={() => handleUpdateCourse(c.id)}
                    style={{ marginRight: "5px" }}
                  >
                    L∆∞u
                  </button>
                  <button onClick={() => setEditingId(null)}>H·ªßy</button>
                </>
              ) : (
                <>
                  <Link to={`/course/${c.id}`} style={{ textDecoration: "none" }}>
                    <strong>{c.title}</strong>
                  </Link>
                  <div>
                    <button
                      onClick={() => {
                        setEditingId(c.id);
                        setNewName(c.title);
                      }}
                      style={{
                        marginLeft: "10px",
                        background: "#2196F3",
                        color: "white",
                        padding: "5px 8px",
                        border: "none",
                        borderRadius: "5px",
                        cursor: "pointer",
                      }}
                    >
                      ‚úèÔ∏è
                    </button>
                    <button
                      onClick={() => handleDeleteCourse(c.id)}
                      style={{
                        marginLeft: "10px",
                        background: "red",
                        color: "white",
                        padding: "5px 8px",
                        border: "none",
                        borderRadius: "5px",
                        cursor: "pointer",
                      }}
                    >
                      üóëÔ∏è
                    </button>
                  </div>
                </>
              )}
            </li>
          ))
        ) : (
          <p>Ch∆∞a c√≥ kho√° h·ªçc n√†o.</p>
        )}
      </ul>
    </div>
  );
};

export default Home;
